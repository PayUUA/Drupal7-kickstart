<?php

module_load_include('inc', 'commerce_payu', 'includes/commerce_payu.admin');

include_once drupal_get_path('module', 'commerce_payu')."/includes/class.payu.php";



function commerce_payu_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_payu'] = array(
    'base' => 'commerce_payu',
    'title' => t('PayU'),
    'short_title' => t('PayU'),
    'display_title' => t('PayU'),
    'description' => t('Integrates PayU Merchant'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'active' => TRUE,
  );
  return $payment_methods;
}



function commerce_payu_menu() {
  $items['payu/result'] = array(
    'title' => 'Результат оплаты через PayU',
    'page callback' => 'commerce_payu_result',
    #'page arguments' => array(2, 3),
    'access callback' => TRUE,  
    'type' => MENU_CALLBACK,
  );
  return $items;
}


# after check payment system
function commerce_payu_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();  
  $text = theme('image', array('path' => drupal_get_path('module', 'commerce_payu') . '/payu.gif', 'alt' => t('PayU'), 'title' => t('PayU'), 'attributes' => array('class' => 'wm-logo')));   
  $text .= '<div class="payu-desc">' . t('PayU - Это мультифункциональный способ оплаты.') . '</div>';
  $form['print_receipt'] = array('#markup' => $text);  
  return $form;
}




function getBillDelivery( $order )
{
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
  $shipping_address = $wrapper->commerce_customer_shipping->commerce_customer_address->value();
  $name_parts = explode(' ', $shipping_address['name_line']);
      $shipping_address['first_name'] = array_shift($name_parts);
      $shipping_address['last_name'] = implode(' ', $name_parts);
  $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);


 return array(
    "BILL_FNAME" => $billing_address['first_name'],
    "BILL_LNAME" => $billing_address['last_name'],
    "BILL_EMAIL" => $order->mail,
    "BILL_PHONE" => "",
    "BILL_ADDRESS" => $billing_address['thoroughfare'],
    "BILL_ADDRESS2" => $billing_address['premise'],
    "BILL_ZIPCODE" => $billing_address['postal_code'],
    "BILL_CITY" => $billing_address['locality'],
    "BILL_STATE" => $billing_address['administrative_area'],
    "BILL_COUNTRYCODE" => $billing_address['country'],
    "DELIVERY_FNAME" => $shipping_address['first_name'],
    "DELIVERY_LNAME" => $shipping_address['last_name'],
    "DELIVERY_EMAIL" => $order->mail,
    "DELIVERY_PHONE" => "",
    "DELIVERY_ADDRESS" => $shipping_address['thoroughfare'], 
    "DELIVERY_ADDRESS2" => $shipping_address['premise'],
    "DELIVERY_ZIPCODE" => $shipping_address['postal_code'],
    "DELIVERY_CITY" => $shipping_address['locality'],
    "DELIVERY_STATE" => $shipping_address['administrative_area'],
    "DELIVERY_COUNTRYCODE" => $shipping_address['country'],
    );
}

  


function commerce_payu_build_redirect_form($form, &$form_state, $order, $settings) {



$billing = getBillDelivery( $order ); #commerce_payu_get_billing_info($order);
$option  = array( 
                  'merchant' => commerce_payu_get_settings('merchant'), 
                  'secretkey' => commerce_payu_get_settings('secret_key'), 
                  'debug' => commerce_payu_get_settings('debug_mode') 
                  );

$lu = commerce_payu_get_settings('lu_url');
if ( $lu != "" ) $option['luUrl'] = $lu;


$forSend = array (
          'ORDER_REF' => $order->order_id, # Uniqe order 
          'PRICES_CURRENCY' => commerce_payu_get_settings('currency'),  # Currency
          'LANGUAGE' => commerce_payu_get_settings('language'),
          );
      $data = commerce_payu_get_orderdata($order);
      $forSend = array_merge( $forSend, $data, $billing );

  $pay = PayU::getInst()->setOptions( $option )->setData( $forSend )->LU();

  echo $pay;
  return $pay->getArr();
}



function commerce_payu_get_orderdata($order)
{
  $data = array();
  $currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];  
  $amount = commerce_currency_amount_to_decimal($order->commerce_order_total[LANGUAGE_NONE][0]['amount'], $currency_code);

  foreach ($order->commerce_line_items["und"] as $line) {
 
  $line_item = commerce_line_item_load($line['line_item_id']);


  if ( $line_item->type === "product" )
  {
    $product = commerce_product_load( $line_item->commerce_product["und"][0]["product_id"] );
    $price = &$line_item->commerce_unit_price["und"][0]['data']['components'];

  
    $tax = round($price[1]['price']['data']['tax_rate']['rate'] * 100) + 1;


    $data['ORDER_PNAME'][] = $product->title_original;
    $data['ORDER_PCODE'][] = $line_item->line_item_id;
    $data['ORDER_PINFO'][] = "";
    $data['ORDER_PRICE'][] =  commerce_currency_amount_to_decimal( $line_item->commerce_unit_price["und"][0]['amount'], $currency_code);
    $data['ORDER_QTY'][] = (int)$line_item->quantity;
    $data['ORDER_VAT'][] = $tax; 
    $data['ORDER_PRICE_TYPE'][] = "GROSS";
  }
  elseif ($line_item->type === "shipping")
  {
    $data['ORDER_SHIPPING'] = commerce_currency_amount_to_decimal( $line_item->commerce_total["und"][0]["amount"], $currency_code);
  }
  
  }
  return $data;
}




function commerce_payu_redirect_form($form, &$form_state, $order, $payment_method) {
  return commerce_payu_build_redirect_form($form, $form_state, $order, $payment_method['settings']);
}


function commerce_payu_order_desc($order_id) {  
   $output = '';
   $text = commerce_payu_get_settings('description');  
   $output = (mb_strlen($text)) ? str_replace('%order', $order_id , $text) : t('Payment for order @order_number at @store', array('@order_number' => $order_id, '@store' => variable_get('site_name', '')));
 return $output;
}

function commerce_payu_get_settings($settings) {
    $output = '';
    $vars = variable_get('commerce_payu_settings', '');
    if (!empty($vars)) {
      foreach ($vars as $key=>$var) {
        if ($key == $settings) {
          $output = $vars[$key]['#default_value'];
          break;
        }  
      }
    }
  return $output;
}




function commerce_payu_result( ) {

$option  = array( 
                  'merchant' => commerce_payu_get_settings('merchant'), 
                  'secretkey' => commerce_payu_get_settings('secret_key'), 
                  'debug' => commerce_payu_get_settings('debug_mode') 
                  );

$payansewer = PayU::getInst()->setOptions( $option )->IPN();
 


  $recived_order_id = $_POST['REFNOEXT'];
  $order = commerce_order_load($recived_order_id);
  
  $currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $real_amount = abs(commerce_currency_amount_to_decimal($order->commerce_order_total[LANGUAGE_NONE][0]['amount'], $currency_code));      
  
  $recived_amount = abs($_POST['IPN_TOTALGENERAL']);

  $log = (commerce_payu_get_settings('log')) ? '<pre>' . check_plain(print_r($_POST, TRUE)) . '</pre>' : '';


  if ($real_amount == $recived_amount) {
      $transaction = commerce_payu_create_transaction($recived_order_id, commerce_payu_get_settings('status')); 
      

      watchdog('commerce_payu', 'Order #@order paid successfully. !log', array('@order' => $_POST['REFNOEXT'], '!log' => $log), WATCHDOG_NOTICE);
      echo $payansewer;

      
  } else {
      drupal_set_message(t('An error occurred while processing your payment: recieved and real order info do not match'), 'error');       
        watchdog('commerce_payu', 'Order #@order was not paid: recieved and real order info do not match. !log', array('@order' => $_POST['REFNOEXT'], '!log' => $log), WATCHDOG_NOTICE);           
      }
}







function commerce_payu_statuses() {
  $options = array();  
  $statuses = commerce_payment_transaction_statuses();
  if(!empty($statuses)) {
    foreach($statuses as $status) { 
      $options[$status['status']] = $status['title']; 
    }
  }
  return $options;
}




function commerce_payu_create_transaction($order_id, $status) {
  $order = commerce_order_load($order_id);
  $transaction = commerce_payment_transaction_new('commerce_payu', $order->order_id);
  $transaction->instance_id = $order->data['payment_method'];
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $transaction->status = $status;
  $transaction->message = '';
  $transaction->message_variables = array();
    commerce_payment_transaction_save($transaction);
}